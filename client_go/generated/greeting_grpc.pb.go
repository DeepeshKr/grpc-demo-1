// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	Greet(ctx context.Context, in *ClientInput, opts ...grpc.CallOption) (*ServerOutput, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Greet(ctx context.Context, in *ClientInput, opts ...grpc.CallOption) (*ServerOutput, error) {
	out := new(ServerOutput)
	err := c.cc.Invoke(ctx, "/Greeter/greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	Greet(context.Context, *ClientInput) (*ServerOutput, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) Greet(context.Context, *ClientInput) (*ServerOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Greet(ctx, req.(*ClientInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "greet",
			Handler:    _Greeter_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeting.proto",
}

// BookStoreClient is the client API for BookStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookStoreClient interface {
	// Searches for a book
	First(ctx context.Context, in *BookSearch, opts ...grpc.CallOption) (*Book, error)
}

type bookStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBookStoreClient(cc grpc.ClientConnInterface) BookStoreClient {
	return &bookStoreClient{cc}
}

func (c *bookStoreClient) First(ctx context.Context, in *BookSearch, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/BookStore/first", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookStoreServer is the server API for BookStore service.
// All implementations must embed UnimplementedBookStoreServer
// for forward compatibility
type BookStoreServer interface {
	// Searches for a book
	First(context.Context, *BookSearch) (*Book, error)
	mustEmbedUnimplementedBookStoreServer()
}

// UnimplementedBookStoreServer must be embedded to have forward compatible implementations.
type UnimplementedBookStoreServer struct {
}

func (UnimplementedBookStoreServer) First(context.Context, *BookSearch) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method First not implemented")
}
func (UnimplementedBookStoreServer) mustEmbedUnimplementedBookStoreServer() {}

// UnsafeBookStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookStoreServer will
// result in compilation errors.
type UnsafeBookStoreServer interface {
	mustEmbedUnimplementedBookStoreServer()
}

func RegisterBookStoreServer(s grpc.ServiceRegistrar, srv BookStoreServer) {
	s.RegisterService(&BookStore_ServiceDesc, srv)
}

func _BookStore_First_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookStoreServer).First(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookStore/first",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookStoreServer).First(ctx, req.(*BookSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// BookStore_ServiceDesc is the grpc.ServiceDesc for BookStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookStore",
	HandlerType: (*BookStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "first",
			Handler:    _BookStore_First_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeting.proto",
}

// MovieClubClient is the client API for MovieClub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieClubClient interface {
	// Searches for a movie
	First(ctx context.Context, in *MovieSearch, opts ...grpc.CallOption) (*Movie, error)
}

type movieClubClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieClubClient(cc grpc.ClientConnInterface) MovieClubClient {
	return &movieClubClient{cc}
}

func (c *movieClubClient) First(ctx context.Context, in *MovieSearch, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/MovieClub/first", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieClubServer is the server API for MovieClub service.
// All implementations must embed UnimplementedMovieClubServer
// for forward compatibility
type MovieClubServer interface {
	// Searches for a movie
	First(context.Context, *MovieSearch) (*Movie, error)
	mustEmbedUnimplementedMovieClubServer()
}

// UnimplementedMovieClubServer must be embedded to have forward compatible implementations.
type UnimplementedMovieClubServer struct {
}

func (UnimplementedMovieClubServer) First(context.Context, *MovieSearch) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method First not implemented")
}
func (UnimplementedMovieClubServer) mustEmbedUnimplementedMovieClubServer() {}

// UnsafeMovieClubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieClubServer will
// result in compilation errors.
type UnsafeMovieClubServer interface {
	mustEmbedUnimplementedMovieClubServer()
}

func RegisterMovieClubServer(s grpc.ServiceRegistrar, srv MovieClubServer) {
	s.RegisterService(&MovieClub_ServiceDesc, srv)
}

func _MovieClub_First_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieClubServer).First(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieClub/first",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieClubServer).First(ctx, req.(*MovieSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieClub_ServiceDesc is the grpc.ServiceDesc for MovieClub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieClub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MovieClub",
	HandlerType: (*MovieClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "first",
			Handler:    _MovieClub_First_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeting.proto",
}
