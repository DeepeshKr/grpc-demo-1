# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greeting_pb2 as greeting__pb2


class GreeterStub(object):
    """Greeter service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.greet = channel.unary_unary(
                '/Greeter/greet',
                request_serializer=greeting__pb2.ClientInput.SerializeToString,
                response_deserializer=greeting__pb2.ServerOutput.FromString,
                )


class GreeterServicer(object):
    """Greeter service
    """

    def greet(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'greet': grpc.unary_unary_rpc_method_handler(
                    servicer.greet,
                    request_deserializer=greeting__pb2.ClientInput.FromString,
                    response_serializer=greeting__pb2.ServerOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Greeter service
    """

    @staticmethod
    def greet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/greet',
            greeting__pb2.ClientInput.SerializeToString,
            greeting__pb2.ServerOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BookStoreStub(object):
    """BookStore service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.first = channel.unary_unary(
                '/BookStore/first',
                request_serializer=greeting__pb2.BookSearch.SerializeToString,
                response_deserializer=greeting__pb2.Book.FromString,
                )


class BookStoreServicer(object):
    """BookStore service
    """

    def first(self, request, context):
        """Searches for a book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'first': grpc.unary_unary_rpc_method_handler(
                    servicer.first,
                    request_deserializer=greeting__pb2.BookSearch.FromString,
                    response_serializer=greeting__pb2.Book.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BookStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BookStore(object):
    """BookStore service
    """

    @staticmethod
    def first(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BookStore/first',
            greeting__pb2.BookSearch.SerializeToString,
            greeting__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MovieClubStub(object):
    """MovieClub service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.first = channel.unary_unary(
                '/MovieClub/first',
                request_serializer=greeting__pb2.MovieSearch.SerializeToString,
                response_deserializer=greeting__pb2.Movie.FromString,
                )


class MovieClubServicer(object):
    """MovieClub service
    """

    def first(self, request, context):
        """Searches for a movie
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieClubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'first': grpc.unary_unary_rpc_method_handler(
                    servicer.first,
                    request_deserializer=greeting__pb2.MovieSearch.FromString,
                    response_serializer=greeting__pb2.Movie.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieClub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieClub(object):
    """MovieClub service
    """

    @staticmethod
    def first(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieClub/first',
            greeting__pb2.MovieSearch.SerializeToString,
            greeting__pb2.Movie.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
